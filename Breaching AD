OSINT and Phishing
    
    The most popular methods that we can gain access to the first set of AD credentials are Open Source Intelligence (OSINT) and Phishing.
    
    - Users who ask questions on public forums such as Stack Overflow but disclose sensitive information such as their credentials in the question.
    - Developers that upload scripts to services such as Github with credentials hardcoded.
    - Credentials being disclosed in past breaches since employees used their work accounts to sign up for other external websites. Websites such as HaveIBeenPwned and DeHashed provide excellent platforms to determine if someone's information, such as work email, was ever involved in a publicly known data breach.

NTLM Authenticated Services
    
    New Technology LAN Manager (NTLM) is the suite of security protocols used to authenticate users' identities in AD. NTLM can be used for authentication by using a challenge-response-based scheme called NetNTLM. This authentication mechanism is heavily used by the services on a network. However, services that use NetNTLM can also be exposed to the internet. The following are some of the popular examples:
    
    - Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal.
    - Remote Desktop Protocol (RDP) service of a server being exposed to the internet.
    - Exposed VPN endpoints that were integrated with AD.
    - Web applications that are internet-facing and make use of NetNTLM.
    
    NetNTLM, also often referred to as Windows Authentication or just NTLM Authentication, allows the application to play the role of a middle man man between the client and AD. All authentication material is forwarded to a Domain Controller in the form of a challenge, and if completed successfully, the application will authenticate the user.

Brute-force Login Attacks

    We could perhaps try to use these for brute force attacks if we recover information such as valid email addresses during our initial red team recon.

LDAP Bind Credentials

    Another method of AD authentication that applications can use is Lightweight Directory Access Protocol (LDAP) authentication. LDAP authentication is similar to NTLM authentication. However, with LDAP authentication, the application directly verifies the user's credentials. The application has a pair of AD credentials that it can use first to query LDAP and then verify the AD user's credentials.
    
    LDAP authentication is a popular mechanism with third-party (non-Microsoft) applications that integrate with AD. These include applications and systems such as:
    
    - Gitlab
    - Jenkins
    - Custom-developed web applications
    - Printers
    - VPNs
    If you could gain a foothold on the correct host, such as a Gitlab server, it might be as simple as reading the configuration files to recover these AD credentials. These credentials are often stored in plain text in configuration files since the security model relies on keeping the location and storage configuration file secure rather than its contents.

Hosting a Rogue LDAP Server
    
    There are several ways to host a rogue LDAP server, but we will use OpenLDAP for this example:
    
    `sudo apt-get update && sudo apt-get -y install slapd ldap-utils && sudo systemctl enable slapd`
    
    `sudo dpkg-reconfigure -p low slapd`
    
    1. Make sure to press <No> when requested if you want to skip server configuration
    2. For the DNS domain name, you want to provide our target domain, which is {yourDomain}
    3. Use this same name for the Organisation name as well
    4. Provide any Administrator password
    5. Select MDB as the LDAP database to use
    6. For the last two options, ensure the database is not removed when purged
    7. Move old database files before a new one is created
    
    Before using the rogue LDAP server, we need to make it vulnerable by downgrading the supported authentication mechanisms. We want to ensure that our LDAP server only supports PLAIN and LOGIN authentication methods. To do this, we need to create a new ldif file, called with the following content:
    
    olcSaslSecProps.ldif
    
    ```
    #olcSaslSecProps.ldifdn: cn=config
    replace: olcSaslSecProps
    olcSaslSecProps: noanonymous,minssf=0,passcred
    ```
    
    The file has the following properties:
    
    - **olcSaslSecProps:** Specifies the SASL security properties
    - **noanonymous:** Disables mechanisms that support anonymous login
    - **minssf:** Specifies the minimum acceptable security strength with 0, meaning no protection.
    
    Now we can use the ldif file to patch our LDAP server using the following:
    
    ```
    sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif && sudo service slapd restart
    ```
    
    We can verify that our rogue LDAP server's configuration has been applied using the following command (
    
    **Note**
    
    : If you are using Kali, you may not receive any output, however the configuration should have worked and you can continue with the next steps):
    
    LDAP search to verify supported authentication mechanisms
    
    ```
    [thm@thm]$ ldapsearch -H ldap:// -x -LLL -s base -b "" supportedSASLMechanismsdn:
    supportedSASLMechanisms: PLAIN
    supportedSASLMechanisms: LOGIN
    
    ```
    
    If you configured your rogue LDAP server correctly and it is downgrading the communication, you will receive the following error: "This distinguished name contains invalid syntax". If you receive this error, you can use a tcpdump to capture the credentials using the following command:
    
    TCPDump
    
    ```
    [thm@thm]$ sudo tcpdump -SX -i breachad tcp port 389tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
    listening on eth1, link-type EN10MB (Ethernet), snapshot length 262144 bytes
    .........
    ```

Authentication Relays
Server Message Block

    The Server Message Block (SMB) protocol allows clients (like workstations) to communicate with a server (like a file share). In networks that use Microsoft AD, SMB governs everything from inter-network file-sharing to remote administration. Even the "out of paper" alert your computer receives when you try to print a document is the work of the SMB protocol.
    
    However, the security of earlier versions of the SMB protocol was deemed insufficient. Several vulnerabilities and exploits were discovered that could be leveraged to recover credentials or even gain code execution on devices. Although some of these vulnerabilities were resolved in newer versions of the protocol, often organisations do not enforce the use of more recent versions since legacy systems do not support them. We will be looking at two different exploits for NetNTLM authentication with SMB:
    
    - Since the NTLM Challenges can be intercepted, we can use offline cracking techniques to recover the password associated with the NTLM Challenge. However, this cracking process is significantly slower than cracking NTLM hashes directly.
    - We can use our rogue device to stage a man in the middle attack, relaying the SMB authentication between the client and server, which will provide us with an active authenticated session and access to the target server.

LLMNR, NBT-NS, and WPAD

    We will take a look at the authentication that occurs during the use of SMB. We will use Responder to attempt to intercept the NetNTLM challenge to crack it. There are usually a lot of these challenges flying around on the network. Some security solutions even perform a sweep of entire IP ranges to recover information from hosts. Sometimes due to stale DNS records, these authentication challenges can end up hitting your rogue device instead of the intended host.
    
    Responder allows us to perform Man-in-the-Middle attacks by poisoning the responses during NetNTLM authentication, tricking the client into talking to you instead of the actual server they wanted to connect to. On a real LAN, Responder will attempt to poison any  Link-Local Multicast Name Resolution (LLMNR),  NetBIOS Name Service (NBT-NS), and Web Proxy Auto-Discovery (WPAD) requests that are detected. On large Windows networks, these protocols allow hosts to perform their own local DNS resolution for all hosts on the same local network. Rather than overburdening network resources such as the DNS servers, hosts can first attempt to determine if the host they are looking for is on the same local network by sending out LLMNR requests and seeing if any hosts respond. The NBT-NS is the precursor protocol to LLMNR, and WPAD requests are made to try and find a proxy for future HTTP(s) connections.
    
    Since these protocols rely on requests broadcasted on the local network, our rogue device would also receive these requests. Usually, these requests would simply be dropped since they were not meant for our host. However, Responder will actively listen to the requests and send poisoned responses telling the requesting host that our IP is associated with the requested hostname. By poisoning these requests, Responder attempts to force the client to connect to our AttackBox. In the same line, it starts to host several servers such as SMB, HTTP, SQL, and others to capture these requests and force authentication.

Intercepting NetNTLM

    One thing to note is that Responder essentially tries to win the race condition by poisoning the connections to ensure that you intercept the connection.
    
    By poisoning authentication requests, normal network authentication attempts would fail, meaning users and services would not connect to the hosts and shares they intend to. Do keep this in mind when using Responder on a security assessment.
    
    https://github.com/lgandx/Responder. We will set Responder to run on the interface connected to the {yourInterface}: (you can check this interface via ip a)
    
    `sudo responder -I {yourInterface}`
    
    Leave Responder running for a bit (average 10 minutes, get some fresh air!), and you should receive an SMBv2 connection which Responder can use to entice and extract an NTLMv2-SSP response. It will look something like this:
    
    NTLM Password Spraying Attack
    
    ```
    [+] Listening for events...
    [SMBv2] NTLMv2-SSP Client   : <Client IP>
    [SMBv2] NTLMv2-SSP Username : ZA\<Service Account Username>
    [SMBv2] NTLMv2-SSP Hash     : <Service Account Username>::ZA:<NTLMv2-SSP Hash>
    ```
    
    If we were using our rogue device, we would probably run Responder for quite some time, capturing several responses. Once we have a couple, we can start to perform some offline cracking of the responses in the hopes of recovering their associated NTLM passwords. If the accounts have weak passwords configured, we have a good chance of successfully cracking them. Copy the NTLMv2-SSP Hash to a textfile. We will then use the password list provided in the downloadable files for this task and Hashcat in an attempt to crack the hash using the following command:
    
    `hashcat -m 5600 <hash file> <password file> --force`
    
    Any hashes that we can crack will now provide us with AD credentials for our breach!
    
    In some instances, however, we can take this a step further by trying to relay the challenge instead of just capturing it directly. This is a little bit more difficult to do without prior knowledge of the accounts since this attack depends on the permissions of the associated account. We need a couple of things to play in our favour:
    
    - SMB Signing should either be disabled or enabled but not enforced. When we perform a relay, we make minor changes to the request to pass it along. If SMB signing is enabled, we won't be able to forge the message signature, meaning the server would reject it.
    - The associated account needs the relevant permissions on the server to access the requested resources. Ideally, we are looking to relay the challenge and response of an account with administrative privileges over the server, as this would allow us to gain a foothold on the host.
    - Since we technically don't yet have an AD foothold, some guesswork is involved into what accounts will have permissions on which hosts. If we had already breached AD, we could perform some initial enumeration first, which is usually the case.
    
    This is why blind relays are not usually popular. Ideally, you would first breach AD using another method and then perform enumeration to determine the privileges associated with the account you have compromised. From here, you can usually perform lateral movement for privilege escalation across the domain.

Configuration Files
    
    Depending on the host that was breached, various configuration files may be of value for enumeration:
    
    - Web application config files
    - Service configuration files
    - Registry keys
    - Centrally deployed applications
    
    Several enumeration scripts, such as [Seatbelt](https://github.com/GhostPack/Seatbelt), can be used to automate this process.

Mitigations

    In terms of mitigations, there are some steps that organizations can take:
    
    - User awareness and training - The weakest link in the cybersecurity chain is almost always users. Training users and making them aware that they should be careful about disclosing sensitive information such as credentials and not trust suspicious emails reduces this attack surface.
    - Limit the exposure of AD services and applications online - Not all applications must be accessible from the internet, especially those that support NTLM and LDAP authentication. Instead, these applications should be placed in an intranet that can be accessed through a VPN. The VPN can then support multi-factor authentication for added security.
    - Enforce Network Access Control (NAC) - NAC can prevent attackers from connecting rogue devices on the network. However, it will require quite a bit of effort since legitimate devices will have to be allowlisted.
    - Enforce SMB Signing - By enforcing SMB signing, SMB relay attacks are not possible.
    - Follow the principle of least privileges - In most cases, an attacker will be able to recover a set of AD credentials. By following the principle of least privilege, especially for credentials used for services, the risk associated with these credentials being compromised can be significantly reduced.
