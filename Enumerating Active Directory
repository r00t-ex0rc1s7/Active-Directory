**Runas Explained**

    Have you ever found AD credentials but nowhere to log in with them? Runas may be the answer you've been looking for!
    
    In security assessments, you will often have network access and have just discovered AD credentials but have no means or privileges to create a new domain-joined machine. So we need the ability to use those credentials on a Windows machine we control.
    
    If we have the AD credentials in the format of :, we can use Runas, a legitimate Windows binary, to inject the credentials into memory. The usual Runas command would look something like this:
    
    ```
    runas.exe /netonly /user:<domain>\<username> cmd.exe
    ```
    
    Let's look at the parameters:
    
    - **/netonly** - Since we are not domain-joined, we want to load the credentials for network authentication but not authenticate against a domain controller. So commands executed locally on the computer will run in the context of your standard Windows account, but any network connections will occur using the account specified here.
    - **/user** - Here, we provide the details of the domain and the username. It is always a safe bet to use the Fully Qualified Domain Name (FQDN) instead of just the NetBIOS name of the domain since this will help with resolution.
    - **cmd.exe** - This is the program we want to execute once the credentials are injected. This can be changed to anything, but the safest bet is cmd.exe since you can then use that to launch whatever you want, with the credentials injected.
    
    Once you run this command, you will be prompted to supply a password. Note that since we added the /netonly parameter, the credentials will not be verified directly by a domain controller so that it will accept any password. We still need to confirm that the network credentials are loaded successfully and correctly.
    
    **IP vs Hostnames**
    
    **Question:** *Is there a difference between `dir \\za.tryhackme.com\SYSVOL` and `dir \\<DC IP>\SYSVOL` and why the big fuss about DNS?*
    
    There is quite a difference, and it boils down to the authentication method being used. When we provide the hostname, network authentication will attempt first to perform Kerberos authentication. Since Kerberos authentication uses hostnames embedded in the tickets, if we provide the IP instead, we can force the authentication type to be NTLM. While on the surface, this does not matter to us right now, it is good to understand these slight differences since they can allow you to remain more stealthy during a Red team assessment. In some instances, organisations will be monitoring for OverPass- and Pass-The-Hash Attacks. Forcing NTLM authentication is a good trick to have in the book to avoid detection in these cases.

---

## Enumeration through Command Prompt

CMD has a built-in command that we can use to enumerate information about AD, namely `net`. The `net` command is a handy tool to enumerate information about the local system and AD. We will look at a couple of interesting things we can enumerate from this position, but this is not an exhaustive list.

**Users**

    We can use the `net` command to list all users in the AD domain by using the `user` sub-option:
    
    `C:\>net user /domain`
    
    This will return all AD users for us and can be helpful in determining the size of the domain to stage further attacks. We can also use this sub-option to enumerate more detailed information about a single user account:
    
    `C:\>net user zoe.marshall /domain`

**Groups**
    
    We can use the `net` command to enumerate the groups of the domain by using the `group` sub-option:
    
    `C:\>net group /domain`
    
    This information can help us find specific groups to target for goal execution. We could also enumerate more details such as membership to a group by specifying the group in the same command:
    
    `C:\>net group "Tier 1 Admins" /domain`

**Password Policy**
    
    We can use the `net` command to enumerate the password policy of the domain by using the `accounts` sub-option:
    
    `C:\>net accounts /domain`
    
    This will provide us with helpful information such as:
    
    - Length of password history kept. Meaning how many unique passwords must the user provide before they can reuse an old password.
    - The lockout threshold for incorrect password attempts and for how long the account will be locked.
    - The minimum length of the password.
    - The maximum age that passwords are allowed to reach indicating if passwords have to be rotated at a regular interval.
    
    You can find the full range of options associated with the net command [here](https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/net-commands-on-operating-systems)

---

## Enumeration through PowerShell

Using our SSH terminal, we can upgrade it to a PowerShell terminal using the following command: `powershell`

**Users**

    We can use the `Get-ADUser` cmdlet to enumerate AD users:
    
    `PS C:\> Get-ADUser -Identity gordon.stevens -Server za.tryhackme.com -Properties *`
    
    The parameters are used for the following:
    
    - Identity - The account name that we are enumerating
    - Properties - Which properties associated with the account will be shown, * will show all properties
    - Server - Since we are not domain-joined, we have to use this parameter to point it to our domain controller
    
    For most of these cmdlets, we can also use the`-Filter` parameter that allows more control over enumeration and use the `Format-Table` cmdlet to display the results such as the following neatly:
    
    `PS C:\> Get-ADUser -Filter 'Name -like "*stevens"' -Server za.tryhackme.com | Format-Table Name,SamAccountName -A`

**Groups**
    
    We can use the `Get-ADGroup` cmdlet to enumerate AD groups:
    
    `PS C:\> Get-ADGroup -Identity Administrators -Server za.tryhackme.com`
    
    We can also enumerate group membership using the `Get-ADGroupMember` cmdlet:
    
    `PS C:\> Get-ADGroupMember -Identity Administrators -Server za.tryhackme.com`

**AD Objects**
    
    A more generic search for any AD objects can be performed using the `Get-ADObject` cmdlet. For example, if we are looking for all AD objects that were changed after a specific date:
    
    `PS C:\> $ChangeDate = New-Object DateTime(2022, 02, 28, 12, 00, 00)
    PS C:\> Get-ADObject -Filter 'whenChanged -gt $ChangeDate' -includeDeletedObjects -Server [za.tryhackme.com](http://za.tryhackme.com/)`
    
    If we wanted to, for example, perform a password spraying attack without locking out accounts, we can use this to enumerate accounts that have a badPwdCount that is greater than 0, to avoid these accounts in our attack:
    
    `PS C:\> Get-ADObject -Filter 'badPwdCount -gt 0' -Server za.tryhackme.com`
    
    **Domains**
    
    We can use `Get-ADDomain` to retrieve additional information about the specific domain:
    
    `PS C:\> Get-ADDomain -Server za.tryhackme.com`
    
    **Altering AD Objects**
    
    The great thing about the AD-RSAT cmdlets is that some even allow you to create new or alter existing AD objects.
    
    PowerShell
    
    ```markup
    PS C:\> Set-ADAccountPassword -Identity gordon.stevens -Server za.tryhackme.com -OldPassword (ConvertTo-SecureString -AsPlaintext "old" -force) -NewPassword (ConvertTo-SecureString -AsPlainText "new" -Force)
```

---

# Enumeration through Bloodhound

    ***Note: Your Bloodhound and Sharphound versions must match for the best results. Usually there are updates made to Bloodhound which means old Sharphound results cannot be ingested. This network was created using Bloodhound v4.1.0. Please make sure to use this version with the Sharphound results***
    
    First of all we need to run the Sharphound.exe on the AD machine
    
## **Sharphound**
    
    There are three different Sharphound collectors:
    
    - **Sharphound.ps1** - PowerShell script for running Sharphound. However, the latest release of Sharphound has stopped releasing the Powershell script version. This version is good to use with RATs since the script can be loaded directly into memory, evading on-disk AV scans.
    - **Sharphound.exe** - A Windows executable version for running Sharphound.
    - **AzureHound.ps1** - PowerShell script for running Sharphound for Azure (Microsoft Cloud Computing Services) instances. Bloodhound can ingest data enumerated from Azure to find attack paths related to the configuration of Azure Identity and Access Management.
    
    `Sharphound.exe --CollectionMethods <Methods> --Domain za.tryhackme.com --ExcludeDCs`
    
    Parameters explained:
    
    - CollectionMethods - Determines what kind of data Sharphound would collect. The most common options are Default or All. Also, since Sharphound caches information, once the first run has been completed, you can only use the Session collection method to retrieve new user sessions to speed up the process.
    - Domain - Here, we specify the domain we want to enumerate. In some instances, you may want to enumerate a parent or other domain that has trust with your existing domain. You can tell Sharphound which domain should be enumerated by altering this parameter.
    - ExcludeDCs -This will instruct Sharphound not to touch domain controllers, which reduces the likelihood that the Sharphound run will raise an alert.
    
    Example:
    
    `PS C:\Users\gordon.stevens\Documents\>SharpHound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs`
    
    It will take about 1 minute for Sharphound to perform the enumeration. In larger organisations, this can take quite a bit longer, even hours to execute for the first time. Once completed, you will have a timestamped ZIP file in the same folder you executed Sharphound from.
    
    We can now use Bloodhound to ingest this ZIP to show us attack paths visually.
    
## **Bloodhound**
    
    As mentioned before, Bloodhound is the GUI that allows us to import data captured by Sharphound and visualise it into attack paths. Bloodhound uses Neo4j as its backend database and graphing system. Neo4j is a graph database management system.
    
    `user:~**#** neo4j console start` or `neo4j console`
    
    In another Terminal tab, run `bloodhound --no-sandbox`. This will show you the authentication GUI:
    
    Then we need to copy of zip file from AD machine: (here is the example from thm)
    
    `scp <AD Username>@THMJMP1.za.tryhackme.com:C:/Users/<AD Username>/Documents/<Sharphound ZIP> .`
    
    Once you provide your password, this will copy the results to your current working directory. Drag and drop the ZIP file onto the Bloodhound GUI to import into Bloodhound. It will show that it is extracting the files and initiating the import.
    
    Once all JSON files have been imported, we can start using Bloodhound to enumerate attack paths for this specific domain.

# Session Data Only

    The structure of AD does not change very often in large organisations. There may be a couple of new employees, but the overall structure of OUs, Groups, Users, and permission will remain the same.
    
    However, the one thing that does change constantly is active sessions and LogOn events. Since Sharphound creates a point-in-time snapshot of the AD structure, active session data is not always accurate since some users may have already logged off their sessions or new users may have established new sessions. This is an essential thing to note and is why we would want to execute Sharphound at regular intervals.
    
    A good approach is to execute Sharphound with the "All" collection method at the start of your assessment and then execute Sharphound at least twice a day using the "Session" collection method. This will provide you with new session data and ensure that these runs are faster since they do not enumerate the entire AD structure again. The best time to execute these session runs is at around 10:00, when users have their first coffee and start to work and again around 14:00, when they get back from their lunch breaks but before they go home.
    
    You can clear stagnant session data in Bloodhound on the Database Info tab by clicking the "Clear Session Information" before importing the data from these new Sharphound runs.
